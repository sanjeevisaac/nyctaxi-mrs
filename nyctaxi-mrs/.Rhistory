rm(list = ls())
library(RevoScaleR)
rm(list = ls())
library(RevoScaleR)
xdf_path <- "C:/Users/adminuser/Downloads/XDF1M"
years <- 2015:2015
months <- 1:12
colors <- c("yellow")
all_months_files <- expand.grid(year = years, month = months, color = colors)
# create a name of the i-th file in the training/test set
get_filename <- function(grid, i, xdf_path) {     month <- grid$month[i]     month0 <- sprintf("%02d", month)     year <- grid$year[i]     color <- grid$color[i]     return(file.path(xdf_path, paste(color, "_tripdata_", year, "-", month0, ".xdf", sep = ""))) }
combine_xdf_pairs <- function(id) {     id1 <- id     id2 <- id1 + 1     file1 <- file.path(get_filename(all_months_files, id1, xdf_path))     file2 <- file.path(get_filename(all_months_files, id2, xdf_path))     rxMerge(inData1 = file1, inData2 = file2, outFile = file.path(xdf_path, paste("/",id1,"-",id2,".xdf",sep = "")), type = "union", overwrite = TRUE) }
n_cores <- 6
grid <- all_months_files
nrows <- nrow(grid)
block_vec <- rep(1:floor(nrows / 2), each = 2)
if (nrows > length(block_vec))
    block_vec[length(block_vec) + 1] <- ceiling(nrows / 2)
grid$block <- block_vec
n_pairs <- length(unique(grid$block[grid$block != -1]))
chunk_size <- ceiling(n_pairs / n_cores)
merge_blocks <- function(i) # i - vector of ids of the pairs to be merged     {         # merge each one of the input pairs     if (length(i) > 1L)         return(sapply(i, create_xdf))         # get ids of files to be merged     pair <- which(grid$block == i)         # actual merge         tmp_file <- file.path(xdf_files, paste("tmp", i, ".xdf", sep = ""))     if (length(pair) == 2) {         file1 <- get_filename(grid, pair[1], xdf_files)         file2 <- get_filename(grid, pair[2], xdf_files)         rxMerge(file1, file2, tmp_file, type = "union", overwrite = TRUE)     } }
rxExec(merge_blocks, i = rxElemArg(1:n_pairs), taskChunkSize = chunk_size,                execObjects = c("grid", "get_filename", "xdf_files"))
xdf_path <- "C:/Users/adminuser/Downloads/XDF1M"
rxExec(merge_blocks, i = rxElemArg(1:n_pairs), taskChunkSize = chunk_size,                execObjects = c("grid", "get_filename", "xdf_path"))
rm(list = ls())
library(RevoScaleR)
xdf_path <- "C:/Users/adminuser/Downloads/XDF1M"
years <- 2015:2015
months <- 1:12
colors <- c("yellow")
all_months_files <- expand.grid(year = years, month = months, color = colors)
# create a name of the i-th file in the training/test set
get_filename <- function(grid, i, xdf_path) {     month <- grid$month[i]     month0 <- sprintf("%02d", month)     year <- grid$year[i]     color <- grid$color[i]     return(file.path(xdf_path, paste(color, "_tripdata_", year, "-", month0, ".xdf", sep = ""))) }
n_cores <- 6
grid <- all_months_files
nrows <- nrow(grid)
block_vec <- rep(1:floor(nrows / 2), each = 2)
if (nrows > length(block_vec))
    block_vec[length(block_vec) + 1] <- ceiling(nrows / 2)
grid$block <- block_vec
n_pairs <- length(unique(grid$block[grid$block != -1]))
chunk_size <- ceiling(n_pairs / n_cores)
# merge two xdf files. The merged file is written in the first file
merge_blocks <- function(i) # i - vector of ids of the pairs to be merged     {         # merge each one of the input pairs     if (length(i) > 1L)         return(sapply(i, create_xdf))         # get ids of files to be merged     pair <- which(grid$block == i)         # actual merge         tmp_file <- file.path(xdf_path, paste("tmp", i, ".xdf", sep = ""))     if (length(pair) == 2) {         file1 <- get_filename(grid, pair[1], xdf_path)         file2 <- get_filename(grid, pair[2], xdf_path)         rxMerge(file1, file2, tmp_file, type = "union", overwrite = TRUE)     } }
rxExec(merge_blocks, i = rxElemArg(1:n_pairs), taskChunkSize = chunk_size,                execObjects = c("grid", "get_filename", "xdf_path"))
rxExec(merge_blocks, elemArgs = 1:n_pairs, taskChunkSize = chunk_size,                execObjects = c("grid", "get_filename", "xdf_path"))
rxOptions(numCoresToUse = n_cores)
rxSetComputeContext("localpar") # use the local parallel compute context
rxExec(merge_blocks, elemArgs = 1:n_pairs, taskChunkSize = chunk_size, execObjects = c("grid", "get_filename", "xdf_path"))
rxExec(merge_blocks, elemArgs = 1:n_pairs, taskChunkSize = chunk_size, execObjects = c("grid", "get_filename", "xdf_path"))
sum(grid$block != -1)
new_block <- 0
if (floor(n_pairs / 2) == ceiling(n_pairs / 2))
    n_pairs_merge <- n_pairs # even number of files to merge
else
    n_pairs_merge <- n_pairs - 1 # odd number of file to merge. The last 'pair' has only one file
floor(n_pairs)
floor(n_pairs/2)
ceiling(n_pairs/2)
if (floor(n_pairs / 2) == ceiling(n_pairs / 2)) n_pairs_merge <- n_pairs else n_pairs_merge <- n_pairs - 1 # odd number of file to merge. The last 'pair' has only one file
n_p
n_pairs_merge
if (n_pairs > 1) {             # update block number of pairs that have two files     for (i in seq(1, n_pairs_merge, 2)) {         new_block <- new_block + 1         min_ind1 <- min(which(grid$block == i))         min_ind2 <- min(which(grid$block == i + 1))                 # remove old block number         grid$block[grid$block == i] <- -1         grid$block[grid$block == i + 1] <- -1                 # assign new block number only to first files in pairs (those were the files that the pair was merged in)         grid$block[min_ind1] <- new_block         grid$block[min_ind2] <- new_block     }     if (n_pairs_merge < n_pairs) {                 # there was odd number of files to merge. The last file was not merged         new_block <- new_block + 1         min_ind <- min(which(grid$block == n_pairs))         grid$block[grid$block == n_pairs] <- -1         grid$block[min_ind] <- ceiling(n_pairs / 2)     } }
n_paris
n_pairs
n_pairs <- length(unique(grid$block[grid$block != -1]))
chunk_size <- ceiling(n_pairs / n_cores)
# merge two xdf files. The merged file is written in the first file
merge_blocks <- function(i) # i - vector of ids of the pairs to be merged     {         # merge each one of the input pairs     if (length(i) > 1L)         return(sapply(i, create_xdf))         # get ids of files to be merged     pair <- which(grid$block == i)         # actual merge         tmp_file <- file.path(xdf_path, paste("tmp", i, ".xdf", sep = ""))     if (length(pair) == 2) {         file1 <- get_filename(grid, pair[1], xdf_path)         file2 <- get_filename(grid, pair[2], xdf_path)         rxMerge(file1, file2, tmp_file, type = "union", overwrite = TRUE)     } }
rxOptions(numCoresToUse = n_cores)
rxSetComputeContext("localpar") # use the local parallel compute context
rxExec(merge_blocks, elemArgs = 1:n_pairs, taskChunkSize = chunk_size, execObjects = c("grid", "get_filename", "xdf_path"))
length(2)
length(1)
length(12)
which(grid$block==2)
length(1:2)
        pair <- which(grid$block == i)
pair
i
i=2
i <- 2
        pair <- which(grid$block == i)
pair
        tmp_file <- file.path(xdf_path, paste("tmp", i, ".xdf", sep = ""))
        if (length(pair) == 2) {             file1 <- get_filename(grid, pair[1], xdf_path)             file2 <- get_filename(grid, pair[2], xdf_path)             rxMerge(file1, file2, tmp_file, type = "union", overwrite = TRUE)         }
file1
file2
trip5 <- rxImport(inData = file1)
trip7 <- rxImport(inData = file2)
rxGetInfo(trip5)
rxGetInfo(trip7)
rxMerge(inData1 = file1, inData2 = file2, type = "union")
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015_07.csv")
rxImport(inData = file.path("C:/Users/adminuser/Downloads/yellow_tripdata_2015_07.csv"))
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015-07.csv")
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015-07.csv",numRows = 10)
colX <-     list("VendorID" = list(type = "string", newName = "vendor_id"),     "tpep_pickup_datetime" = list(type = "Date", newName = "tpep_pickup_datetime"),     "tpep_dropoff_datetime" = list(type = "Date", newName = "tpep_dropoff_datetime"),     "passenger_count" = list(type = "int16", newName = "passenger_count"),     "trip_distance" = list(type = "numeric", newName = "trip_distance"),     "pickup_longitude" = list(type = "numeric", newName = "pickup_longitude"),     "pickup_latitude" = list(type = "numeric", newName = "pickup_latitude"),     "RateCodeID" = list(type = "string", newName = "rate_code_id"),     "RatecodeID" = list(type = "string", newName = "rate_code_id"),     "store_and_fwd_flag" = list(type = "string", newName = "store_and_fwd_flag"),     "dropoff_longitude" = list(type = "numeric", newName = "dropoff_longitude"),     "dropoff_latitude" = list(type = "numeric", newName = "dropoff_latitude"),     "payment_type" = list(type = "string", newName = "payment_type"),     "fare_amount" = list(type = "numeric", newName = "fare_amount"),     "extra" = list(type = "numeric", newName = "extra"),     "mta_tax" = list(type = "numeric", newName = "mta_tax"),     "tip_amount" = list(type = "numeric", newName = "tip_amount"),     "tolls_amount" = list(type = "numeric", newName = "tolls_amount"),     "improvement_surcharge" = list(type = "numeric", newName = "improvement_surcharge"),     "total_amount" = list(type = "numeric", newName = "total_amount"))
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015-07.csv",colInfo = colInfo, numRows = 10)
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015-07.csv",colInfo = colX, numRows = 10)
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015-07.csv",colInfo = colX, numRows = 10)colX <-     list("VendorID" = list(type = "string", newName = "vendor_id"),     "tpep_pickup_datetime" = list(type = "Date", newName = "tpep_pickup_datetime"),     "tpep_dropoff_datetime" = list(type = "Date", newName = "tpep_dropoff_datetime"),     "passenger_count" = list(type = "int16", newName = "passenger_count"),     "trip_distance" = list(type = "numeric", newName = "trip_distance"),     "pickup_longitude" = list(type = "numeric", newName = "pickup_longitude"),     "pickup_latitude" = list(type = "numeric", newName = "pickup_latitude"),     "RateCodeID" = list(type = "string", newName = "rate_code_id"),     "store_and_fwd_flag" = list(type = "string", newName = "store_and_fwd_flag"),     "dropoff_longitude" = list(type = "numeric", newName = "dropoff_longitude"),     "dropoff_latitude" = list(type = "numeric", newName = "dropoff_latitude"),     "payment_type" = list(type = "string", newName = "payment_type"),     "fare_amount" = list(type = "numeric", newName = "fare_amount"),     "extra" = list(type = "numeric", newName = "extra"),     "mta_tax" = list(type = "numeric", newName = "mta_tax"),     "tip_amount" = list(type = "numeric", newName = "tip_amount"),     "tolls_amount" = list(type = "numeric", newName = "tolls_amount"),     "improvement_surcharge" = list(type = "numeric", newName = "improvement_surcharge"),     "total_amount" = list(type = "numeric", newName = "total_amount"))
colX <-     list("VendorID" = list(type = "string", newName = "vendor_id"),     "tpep_pickup_datetime" = list(type = "Date", newName = "tpep_pickup_datetime"),     "tpep_dropoff_datetime" = list(type = "Date", newName = "tpep_dropoff_datetime"),     "passenger_count" = list(type = "int16", newName = "passenger_count"),     "trip_distance" = list(type = "numeric", newName = "trip_distance"),     "pickup_longitude" = list(type = "numeric", newName = "pickup_longitude"),     "pickup_latitude" = list(type = "numeric", newName = "pickup_latitude"),     "RateCodeID" = list(type = "string", newName = "rate_code_id"),     "store_and_fwd_flag" = list(type = "string", newName = "store_and_fwd_flag"),     "dropoff_longitude" = list(type = "numeric", newName = "dropoff_longitude"),     "dropoff_latitude" = list(type = "numeric", newName = "dropoff_latitude"),     "payment_type" = list(type = "string", newName = "payment_type"),     "fare_amount" = list(type = "numeric", newName = "fare_amount"),     "extra" = list(type = "numeric", newName = "extra"),     "mta_tax" = list(type = "numeric", newName = "mta_tax"),     "tip_amount" = list(type = "numeric", newName = "tip_amount"),     "tolls_amount" = list(type = "numeric", newName = "tolls_amount"),     "improvement_surcharge" = list(type = "numeric", newName = "improvement_surcharge"),     "total_amount" = list(type = "numeric", newName = "total_amount"))
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015-07.csv",colInfo = colX, numRows = 10)colX <-     list("VendorID" = list(type = "string", newName = "vendor_id"),     "tpep_pickup_datetime" = list(type = "Date", newName = "tpep_pickup_datetime"),     "tpep_dropoff_datetime" = list(type = "Date", newName = "tpep_dropoff_datetime"),     "passenger_count" = list(type = "int16", newName = "passenger_count"),     "trip_distance" = list(type = "numeric", newName = "trip_distance"),     "pickup_longitude" = list(type = "numeric", newName = "pickup_longitude"),     "pickup_latitude" = list(type = "numeric", newName = "pickup_latitude"),     "RateCodeID" = list(type = "string", newName = "rate_code_id"),     "store_and_fwd_flag" = list(type = "string", newName = "store_and_fwd_flag"),     "dropoff_longitude" = list(type = "numeric", newName = "dropoff_longitude"),     "dropoff_latitude" = list(type = "numeric", newName = "dropoff_latitude"),     "payment_type" = list(type = "string", newName = "payment_type"),     "fare_amount" = list(type = "numeric", newName = "fare_amount"),     "extra" = list(type = "numeric", newName = "extra"),     "mta_tax" = list(type = "numeric", newName = "mta_tax"),     "tip_amount" = list(type = "numeric", newName = "tip_amount"),     "tolls_amount" = list(type = "numeric", newName = "tolls_amount"),     "improvement_surcharge" = list(type = "numeric", newName = "improvement_surcharge"),     "total_amount" = list(type = "numeric", newName = "total_amount"))
rxImport(inData = "C:/Users/adminuser/Downloads/yellow_tripdata_2015-07.csv",colInfo = colX, numRows = 10)
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
source("C:/Users/adminuser/Source/Repos/nyctaxi-mrs/nyctaxi-mrs/Convert2XDF.r")
